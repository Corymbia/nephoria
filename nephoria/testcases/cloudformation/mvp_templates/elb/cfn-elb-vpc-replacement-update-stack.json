{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Elastic Load Balancing Test => Update property attributes in AWS::ElasticLoadBalancing::LoadBalancer resource in VPC that results in resource replacement",

  "Resources" : {
    "VPC": {
       "Type": "AWS::EC2::VPC",
       "Properties" : {
            "CidrBlock" : "10.0.0.0/16",
            "EnableDnsSupport" : "True",
            "EnableDnsHostnames" : "True",
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}} ]
       }
    },

    "Subnet": {
        "Type" : "AWS::EC2::Subnet",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "CidrBlock" : "10.0.0.0/24",
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        }
    },

    "InternetGateway" : {
        "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
        }
    },

    "AttachGateway" : {
        "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "InternetGatewayId" : { "Ref" : "InternetGateway" }
        }
    },

    "RouteTable": {
       "Type" : "AWS::EC2::RouteTable",
       "Properties" : {
           "VpcId" : { "Ref" : "VPC" },
           "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
       }
    },

    "Route" : {
        "Type" : "AWS::EC2::Route",
        "DependsOn" : "AttachGateway",
        "Properties" : {
            "RouteTableId" : { "Ref" : "RouteTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "InternetGateway" }
        }
    },

    "SubnetRouteTableAssocaiation" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "Subnet" },
            "RouteTableId" : { "Ref" : "RouteTable" }
         }
    },

    "NetworkAcl" : {
         "Type" : "AWS::EC2::NetworkAcl",
         "Properties" : {
            "VpcId" : {"Ref" : "VPC"},
            "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
         }
    },

    "InboundHTTPNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
            "NetworkAclId" : {"Ref" : "NetworkAcl"},
            "RuleNumber" : "100",
            "Protocol" : "6",
            "RuleAction" : "allow",
            "Egress" : "false",
            "CidrBlock" : "0.0.0.0/0",
            "PortRange" : {"From" : "80", "To" : "80"}
        }
    },

    "OutBoundNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
            "NetworkAclId" : {"Ref" : "NetworkAcl"},
            "RuleNumber" : "100",
            "Protocol" : "6",
            "RuleAction" : "allow",
            "Egress" : "true",
            "CidrBlock" : "0.0.0.0/0",
            "PortRange" : {"From" : "0", "To" : "65535"}
        }
    },

    "SubnetNetworkAclAssociation" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
            "SubnetId" : { "Ref" : "Subnet" },
            "NetworkAclId" : { "Ref" : "NetworkAcl" }
        }
    },

    "LoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
          "Subnets" : [{ "Ref" : "Subnet" }],
          "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
          "LoadBalancerName" : "UpdatedELB",
          "HealthCheck" : {
              "Target": "HTTP:80/",
              "HealthyThreshold": "3",
              "UnhealthyThreshold": "5",
              "Interval": "30",
              "Timeout": "5"
          },
          "Listeners" : [ {
              "LoadBalancerPort" : "80",
              "InstancePort" : "80",
              "Protocol" : "HTTP"
          } ]
      }
    }
  },

  "Outputs" : {
      "LoadBalancerId" : {
          "Description" : "Resource ID of LoadBalancer",
          "Value" : { "Ref" : "LoadBalancer" }
      },

      "LoadBalancerDNSName" : {
          "Description" : "DNS Name of LoadBalancer",
          "Value" : { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ] }
      },

      "LoadBalancerSecurityGroupName" : {
          "Description" : "Security Group Name of LoadBalancer",
          "Value" : { "Fn::GetAtt" : [ "LoadBalancer", "SourceSecurityGroup.GroupName" ] }
      },

      "LoadBalancerSecurityGroupOwnerAlias" : {
          "Description" : "Group Owner Alias of LoadBalancer",
          "Value" : { "Fn::GetAtt" : [ "LoadBalancer", "SourceSecurityGroup.OwnerAlias" ] }
      }
  }

}
